# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'layerPaintUI.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
from PyQt5.QtGui import QPixmap
from PyQt5.QtWidgets import QApplication, QFileDialog, QTableWidgetItem, QColorDialog, QMessageBox, QDialog, QLabel
from PyQt5.Qt import QThread,QMutex,pyqtSignal
import time
from PyQt5 import QtCore, QtWidgets,QtGui


from LMYUntils.myStringUtil import getImgUrl
from View.layerPaintUI import Ui_MainWindow
import sys
import pandas as pd
from LMYUntils import myStringUtil,myArangeUtil
import matplotlib.pyplot as plt
import numpy as np
import os
from Controller.previewDialogController import previewDialog
from Controller import previewDialogController


dataDictList:list = []
dataDictKey:list = []
figList:list = []

class window(QtWidgets.QMainWindow,Ui_MainWindow):
    def __init__(self):
        super().__init__()
        self.setupUi(self)
        # # 获取显示器分辨率大小
        # screenDesktop = QApplication.desktop()
        # screenRect = screenDesktop.screenGeometry()
        # screenHeight = int(screenRect.height())
        # screenWidth = int(screenRect.width())
        # factor = screenWidth/self.width()
        # #print(factor)
        #
        # self.resize(screenWidth,screenHeight)
        # self.dataTableWidget_2.resize(int(screenWidth/2)-100,int(screenHeight-100))
        #
        # self.imgLabel1.resize(0,0)
        # self.imgLabel1.move(int(self.dataTableWidget_2.width() + self.dataTableWidget_2.rect().x() + ((screenWidth - self.dataTableWidget_2.width()*2  -self.dataTableWidget_2.rect().x())/2)),int(self.imgLabel1.y()))
        # #print(self.imgLabel1.y())
        #
        # self.lineTypeComboBox.resize(int(self.lineTypeComboBox.width()*factor * 3/4),int(self.lineTypeComboBox.height()*factor*3/4))
        # self.lineTypeComboBox.move(self.imgLabel1.x(),self.imgLabel1.y()+self.lineWidthLabel.height()+self.imgLabel1.rect().height()+40+int(self.lineTypeComboBox.height()*factor*3/4))
        #
        # self.lineColorPushButton.resize(self.lineTypeComboBox.width(),self.lineTypeComboBox.height())
        # self.lineColorPushButton.move(self.lineTypeComboBox.x()+self.lineTypeComboBox.width()+int(20*factor),int(self.lineTypeComboBox.y()))
        #
        # self.lineWidthDoubleSpinBox.resize(self.lineTypeComboBox.width(),self.lineTypeComboBox.height())
        # self.lineWidthDoubleSpinBox.move(self.lineColorPushButton.x() + self.lineColorPushButton.width() + int(20 * factor),int(self.lineTypeComboBox.y()))
        # self.lineWidthDoubleSpinBox.setValue(1.00)
        #
        # self.lineWidthLabel.resize(self.lineWidthDoubleSpinBox.width(),int(self.lineWidthDoubleSpinBox.height()*2/3))
        # self.lineWidthLabel.move(self.lineColorPushButton.x() + self.lineColorPushButton.width() + int(20 * factor),int(self.lineWidthDoubleSpinBox.y() - self.lineWidthLabel.height()))
        # self.lineWidthLabel.setAlignment(QtCore.Qt.AlignmentFlag(4))
        #
        # self.XComboBox.resize(self.lineTypeComboBox.width(),self.lineTypeComboBox.height())
        # self.XComboBox.move(self.lineWidthDoubleSpinBox.x() + self.lineWidthDoubleSpinBox.width() + int(20 * factor),int(self.lineWidthDoubleSpinBox.y()))
        #
        # self.YComboBox.resize(self.lineTypeComboBox.width(),self.lineTypeComboBox.height())
        # self.YComboBox.move(self.XComboBox.x() + self.XComboBox.width() + int(20 * factor), int(self.lineTypeComboBox.y()))
        #
        # #label 图片尺寸：
        # self.label.resize(int(self.label.width()*factor),int(self.label.height()*factor))
        # self.label.move(self.lineTypeComboBox.x(),int(self.lineTypeComboBox.y()+self.lineTypeComboBox.height()+20*factor))
        #
        # #label 宽
        # self.label2.resize(int(self.label2.width() * factor), int(self.label2.height() * factor))
        # self.label2.move(self.lineTypeComboBox.x()+self.label.width(),int(self.label.y()))
        #
        # self.widthLineEdit.resize(int(self.widthLineEdit.width() * factor), int(self.widthLineEdit.height() * factor))
        # self.widthLineEdit.move(self.label2.x() + self.label2.width(),int(self.label.y()))
        # self.widthLineEdit.setText('1000')
        #
        # #label 高
        # self.label3.resize(int(self.label3.width() * factor), int(self.label3.height() * factor))
        # self.label3.move(int(self.widthLineEdit.x() + self.widthLineEdit.width() + 10*factor),int(self.label.y()))
        #
        # self.heightLineEdit.resize(int(self.heightLineEdit.width() * factor), int(self.heightLineEdit.height() * factor))
        # self.heightLineEdit.move(int(self.label3.x() + self.label3.width()),int(self.label.y()))
        # self.heightLineEdit.setText('500')
        #
        # # label dpi
        # self.label4.resize(int(self.label4.width() * factor),int(self.label4.height() * factor))
        # self.label4.move(int(self.heightLineEdit.x() + self.heightLineEdit.width() + 10*factor),int(self.label.y()))
        #
        # self.dpitLineEdit.resize(int(self.dpitLineEdit.width() * factor), int(self.dpitLineEdit.height() * factor))
        # self.dpitLineEdit.move(int(self.label4.x() + self.label4.width()),int(self.label.y()))
        # self.dpitLineEdit.setText('120')
        #
        # self.selectFileButton.resize(int(self.selectFileButton.width() * factor), int(self.selectFileButton.height() * factor))
        # self.selectFileButton.move(int(self.label2.x()),int(screenHeight - 3*self.selectFileButton.height() - 20*factor))
        #
        # self.previewPushButton.resize(int(self.previewPushButton.width() * factor), int(self.previewPushButton.height() * factor))
        # self.previewPushButton.move(int(self.selectFileButton.x() + self.selectFileButton.width() + 10 * factor), int(screenHeight - 3*self.selectFileButton.height() - 20*factor))
        #
        # self.savePushButton.resize(int(self.savePushButton.width() * factor),int(self.savePushButton.height() * factor))
        # self.savePushButton.move(int(self.previewPushButton.x() + self.previewPushButton.width() + 10 * factor),int(screenHeight - 3*self.selectFileButton.height() - 20*factor))


        # print("border-image: url(" + getImgUrl(os.getcwd()) + "/uisource/fileSource.png);\n" "")
        # os.chdir("..")
        # print(getImgUrl(os.getcwd()) + "/uisource/fileSource.png;\n")
        #
        # self.selectFileButton.setIcon(QtGui.QIcon(getImgUrl(os.getcwd()) + "/uisource/fileSource.png"))
        # self.selectFileButton.setIconSize(QtCore.QSize(20, 20))
        self.lineColorPushButton.clicked.connect(self.lineColorPushButtonClicked)
        self.selectFileButton.clicked.connect(self.getFileOnClicked)
        self.selectFileButton.clicked.connect(self.creat_table_show)
        self.previewPushButton.clicked.connect(self.previewButtonClicked)
        self.savePushButton.clicked.connect(self.savePushButtonClicked)
        self.XComboBox.activated[str].connect(self.XComboBoxValueChanged)
        self.YComboBox.activated[str].connect(self.YComboBoxValueChanged)


        # np数组生成的图
        #len_x = show_image.shape[1]  # 获取图像大小
        #wid_y = show_image.shape[0]
        #frame = QImage(show_image.data, len_x, wid_y, len_x * 3, QImage.Format_RGB888)  # 此处如果不加len_x*3，就会发生倾斜
        #pix = QPixmap.fromImage(frame)

    def getFileOnClicked(self):
        self.selectFileButton.setEnabled(False)
        self.thread_2 = Thread_2()
        self.thread_2._signal.connect(self.setSelectFileButtonEnable)
        self.thread_2.start()


        fileName, fileType = QFileDialog.getOpenFileName(self, "打开表格", "", "*.xlsx;*.xls;;All Files(*)")
        global path_openfile_name

        ###获取路径====================================================================


        if fileName == '':
            print('111111')
            path_openfile_name = ''
            pass
        else:
            path_openfile_name = fileName

        #print(fileName)

        # if exam_excel[0] != '':
        #     self.view.set_excel_edit_line(exam_excel[0])
        #     print(exam_excel[0])
    def creat_table_show(self):
        global dataDictKey
        global path_openfile_name
        global dataDictList
        dataDictList.clear()
        dataDictKey.clear()
        self.XComboBox.clear()
        self.YComboBox.clear()
        # self.XComboBox.addItem('x轴')
        # self.YComboBox.addItem('y轴')
        ###===========读取表格，转换表格，===========================================
        if  path_openfile_name != '':
            input_table = pd.read_excel(path_openfile_name)
            # print(input_table)
            input_table_rows = input_table.shape[0]
            input_table_colunms = input_table.shape[1]
            dataDictKey = input_table.columns.values.tolist()
            print(dataDictKey)
            #表头
            input_table_header = input_table.columns.values.tolist()

            ###===========读取表格，转换表格，============================================

            ###======================给tablewidget设置行列表头============================
            self.dataTableWidget.setColumnCount(input_table_colunms)
            self.dataTableWidget.setRowCount(input_table_rows)
            self.dataTableWidget.setHorizontalHeaderLabels(input_table_header)
            ###================遍历表格每个元素，同时添加到tablewidget中========================
            for i in range(input_table_rows):
                input_table_rows_values = input_table.iloc[[i]]
               # print(input_table_rows_values)
                input_table_rows_values_array = np.array(input_table_rows_values)
                input_table_rows_values_list = input_table_rows_values_array.tolist()[0]
                #print(input_table_rows_values_list)
                for j in range(input_table_colunms):
                    input_table_items_list = input_table_rows_values_list[j]

                    ###==============将遍历的元素添加到tablewidget中并显示=======================

                    input_table_items = str(input_table_items_list)
                    newItem = QTableWidgetItem(input_table_items)
                    newItem.setTextAlignment(4 | 128)
                    self.dataTableWidget.setItem(i, j, newItem)

                    ###================遍历表格每个元素，同时添加到tablewidget中========================

                    # 刷新界面命令：
            #self.XComboBox.addItems(['1', '2', '3'])

            self.XComboBox.addItems(myStringUtil.deleteBlankStringWithList(input_table_header))
            self.YComboBox.addItems(myStringUtil.deleteBlankStringWithList(input_table_header))

            # self.XComboBox.adjustSize()
            # self.YComboBox.adjustSize()
            QApplication.processEvents()


        else:
            if len(dataDictKey) > 0:
                QMessageBox.information(self.previewPushButton,
                                        '提示！！', '你已取消更新数据源！！')
            else:
                QMessageBox.information(self.previewPushButton,
                                        '提示！！', '你已取消导入数据源！！')




        # qApp = QApplication.instance()
        # qApp.quit()

    # def eventFilter(self, obj, event):
    #
    #     AllItems = [self.combo.itemText(i) for i in range(self.combo.count())]
    #     if obj == self.combo:
    #         if event.type() == QEvent.FocusOut:
    #             if self.combo.lineEdit().text() not in AllItems and self.combo.lineEdit().text() != '':
    #                 self.combo.addItems(self.combo.lineEdit().text());
    #     return QWidget.eventFilter(self, obj, event)

    def lineColorPushButtonClicked(self):
        self.thread_5 = Thread_5()
        self.thread_5.start()
        self.showDialog()
        pass

    def previewButtonClicked(self):
       global dataDictList
       global dataDictKey
       # self.dataTableWidget_2.item()
       self.thread_3 = Thread_3()
       self.thread_3._reloadUISignal.connect(self.setPreviewButtonEnable)
       self.thread_3.start()

       if 0 < len(dataDictKey):
           self.getDataFromTableWidget()
           print(dataDictList[self.XComboBox.currentIndex()])
           print(dataDictList[self.YComboBox.currentIndex()])
           print(self.lineColorPushButton.text())
           if self.lineColorPushButton.text() == '连线颜色':
               self.lineColorPushButton.setText('#000000')
               self.lineColorPushButton.setStyleSheet('QWidget {background-color:#000000}')
           print(self.XComboBox.currentIndex())
           #处理当未选择X轴或Y轴时默认的预览图
           xDictList = [self.XComboBox.currentText()]
           yDictList = [self.YComboBox.currentText()]
           for i in dataDictKey:
               xDictList.append(i)
               yDictList.append(i)
           screenDesktop = QApplication.desktop()
           screenRect = screenDesktop.screenGeometry()
           screenHeight = int(screenRect.height())
           screenWidth = int(screenRect.width())

           if self.widthLineEdit.text() == '' or self.heightLineEdit.text() =='' or self.dpitLineEdit.text() =='':
               QMessageBox.information(self.previewPushButton,
                                       '警告!!!', '宽度、高度和dpi不能为空值!!!')
           elif not (myStringUtil.isNumber(self.widthLineEdit.text())
                   and myStringUtil.isNumber(self.heightLineEdit.text())
                   and myStringUtil.isNumber(self.dpitLineEdit.text())):
               QMessageBox.information(self.previewPushButton,
                                       '警告!!!','请输入数字！！')
           elif int(self.widthLineEdit.text()) > screenWidth +1000:
               QMessageBox.information(self.previewPushButton,
                                       '警告!!!',
                                       ('图片宽度不可以大于屏幕宽度！！！\n提示当前屏幕为%d*%d！！！')%(screenWidth,screenHeight))
           elif int(self.heightLineEdit.text()) > screenHeight+1000:
               QMessageBox.information(self.previewPushButton,
                                       '警告!!!',
                                       ('图片宽度不可以大于屏幕高度！！！\n提示当前屏幕为%d*%d！！！')%(screenWidth,screenHeight))
           elif int(self.dpitLineEdit.text()) <10:
               QMessageBox.information(self.previewPushButton,
                                       '警告!!!','dpi至少大于10!!!')
           else:
               print(dataDictList)
               xNoNoneArray,yNoNoneArray = handlerUnlegalData(dataDictList[self.XComboBox.currentIndex()],
                                  dataDictList[self.YComboBox.currentIndex()])
               xMax = max(xNoNoneArray)
               xMin = min(xNoNoneArray)
               yMax = max(yNoNoneArray)
               yMin = min(yNoNoneArray)

               xStep = myArangeUtil.caculateUnitStep(xMax, xMin)
               yStep = myArangeUtil.caculateUnitStep(yMax,yMin)
               print(xMax)
               print(yMax)
               print(xStep)
               print(yStep)
               drawPlotWithParameterInGui(xNoNoneArray,
                                          myStringUtil.superscriptNumberWithString(self.XTitleTextEdit.toPlainText()),
                                          xMax,
                                          xMin,
                                          xStep,
                                          yNoNoneArray,
                                          myStringUtil.superscriptNumberWithString(self.YTitleTextEdit.toPlainText()),
                                          yMax,
                                          yMin,
                                          yStep,
                                          self.currentLineStyle(self.lineTypeComboBox.currentIndex()),
                                          self.lineWidthDoubleSpinBox.text(),
                                          str(self.lineColorPushButton.text()),
                                          self.widthLineEdit.text(),
                                          self.heightLineEdit.text(),
                                          self.dpitLineEdit.text())
               # 从本地读图
               pixmap = QPixmap(os.getcwd() + '\\preview.png')  # 按指定路径找到图片
               print(pixmap.size())
               if pixmap:
                 print('!!!!!!!!!!')

               else:
                   pass

               previewDialogController.previewDialog = previewDialog()
               previewDialogController.previewDialog.resizeDialog(pixmap.size().width(), pixmap.size().height())
               previewDialogController.previewDialog.setPreviewImg(pixmap)
               previewDialogController.previewDialog.show()

       else:
           QMessageBox.information(self.previewPushButton,'警告！！', '请先导入数据源！！')


    def savePushButtonClicked(self):
        self.thread_4 = Thread_4()
        self.thread_4._savePictureSignal.connect(self.setSaveButtonEnable)
        self.thread_4.start()
        self.savePicture()

    def XComboBoxValueChanged(self):
        print('X轴改变了！！！')

    def YComboBoxValueChanged(self):
        print('Y轴改变了！！！')

    def showDialog(self):
        col = QColorDialog.getColor()
        print(col.name(), "\n")
        if col.isValid():
            self.lineColorPushButton.setStyleSheet('QWidget {background-color:%s}' % col.name())
            self.lineColorPushButton.setText(col.name())

    def currentLineStyle(self,currentIndex:int)->str:
        # 'solid'(默认) '-' 实线
        # 'dotted' ':' 点虚线
        # 'dashed' '--' 破折线
        # 'dashdot' '-.' 点划线
        # 'None' '' 或 ' ' 不画线
        if currentIndex == 0:
            return 'None'
        elif currentIndex == 1:
            return 'solid'
        elif currentIndex == 2:
            return 'dotted'
        elif currentIndex == 3:
            return 'dashed'
        elif currentIndex == 4:
            return 'dashdot'
        elif currentIndex == 5:
            return 'None'
        else:
            return 'solid'

    def getDataFromTableWidget(self):
        global dataDictKey
        global dataDictList
        # dataDictList.append([0,1,2])
        rowCount = self.dataTableWidget.rowCount()
        columnCount = self.dataTableWidget.columnCount()
        #print(self.dataTableWidget_2.item(0,0).text())
        #print(dataDictKey)
        print()
        i = 0
        while i < columnCount:
            columnDataList = []
            j = 0
            while j < rowCount:
                columnDataList.append(self.dataTableWidget.item(j, i).text())
                j = j + 1
            dataDictList.append(columnDataList)
            #print(dataDictList)
            i= i+1

        #
        # for i in columnCount:
        #     for j in rowCount:
        #        columnDataList = columnDataList.append(self.dataTableWidget_2.item(j,i))
        #     dataDictList = dataDictList.append({i:columnDataList})
        print(dataDictList)

    def setSelectFileButtonEnable(self):
        self.selectFileButton.setEnabled(True)

    def setLineColorPushButtonEnable(self):
        self.lineColorPushButton.setEnabled(True)

    def setPreviewButtonEnable(self):
        self.previewPushButton.setEnabled(True)

    def setSaveButtonEnable(self):
        self.savePushButton.setEnabled(True)

    def showPreviewView(self):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(845, 536)
        MainWindow.setStyleSheet("")
        MainWindow.setAnimated(True)

    def savePicture(self):
        global figList
        if len(figList) > 0:
            fig = figList[0]
            fdir, ftype = QFileDialog.getSaveFileName(self,
                                                      "Save Image",
                                                      "./",
                                                      "Image Files (*.jpg)")
            fig.savefig(fdir, bbox_inches='tight')
            print(fdir)
        else:
            QMessageBox.information(self.savePushButton,
                                    '警告！！',
                                    '你还未绘制图片！！')


def handlerUnlegalData(xArray:list,
                       yArray:list):
    xNoNoneArray = []
    yNoNoneArray = []
    # xArray = [round(float(i)) for i in xArray]
    print(xArray)
    for i in xArray:
        try:
            xNoNoneArray.append(round(float(i)))
        except:
            print('x轴存在无法转换为数字的项目！！！')
            xNoNoneArray.append(0)
        else:
            print('当前转化成功！！！')
        finally:
            print('全部转化成功！！！')
    for n in yArray:
        try:
            yNoNoneArray.append(round(float(n)))
        except:
            yNoNoneArray.append(0.0)
            print('由于参数为非数字已强制转为0.0')
        else:
            print('当前转化成功！！！')
        finally:
            print('全部转化成功！！！')
    return xNoNoneArray,yNoNoneArray


def drawPlotWithParameterInGui(xArray:list,
                               xTitle:str,
                               xMax:int,
                               xMin:int,
                               xStep:int,
                               yArray:list,
                               yTitle:str,
                               yMax:int,
                               yMin:int,
                               yStep:int,
                               lineStyle:str,
                               lineWidth:str,
                               lineColor:str,
                               picWidth:str,
                               picHeight:str,
                               picDPI:str):
    global figLi

    figList.clear()
    #plt.figure(figsize=(float(picWidth)/float(picDPI), float(picHeight)/float(picDPI)), dpi=float(picDPI))
    #plt.figure(dpi=float(picDPI))
    plt.figure(figsize=(int(float(picWidth)/float(picDPI)),
                        int(float(picHeight)/float(picDPI))),
               dpi=int(picDPI))

    plt.rcParams['font.sans-serif'] = ['SimHei']
    plt.rcParams['axes.unicode_minus'] = False


    x = np.array(xArray)
    y = np.array(yArray)

    plt.subplot(1,1,1)
    plt.plot(x,
             y,
             color=lineColor,
             linewidth = lineWidth,
             linestyle = lineStyle)

    plt.xticks(np.arange(0,
                         (xMax + myArangeUtil.caculateUnitStep(xMax, xMin)),
                         step=xStep),
               np.arange(0, (xMax + myArangeUtil.caculateUnitStep(xMax, xMin)),
                         step=xStep))
    #plt.yticks(np.linspace(0,maxY,yUnitNum))
    plt.yticks(np.arange(0,
                         (yMax + myArangeUtil.caculateUnitStep(yMax,yMin)),
                         step=yStep),
               np.arange(0,
                         (yMax + myArangeUtil.caculateUnitStep(yMax,yMin)),
                         step=yStep))
    #plt.xticks(rotation = '90')
    #plt.yticks(rotation='90')
    print(xTitle)
    print(yTitle)
    plt.xlabel(xlabel=xTitle)
    plt.ylabel(ylabel=yTitle)
    ax = plt.gca()
    ax.set_ylim(0)
    ax.set_xlim(0)
    ax.spines['top'].set_visible(False)
    ax.spines['right'].set_visible(False)
    #ax.spines['bottom'].set_visible(False)
    ax.xaxis.set_ticks_position('bottom')
    ax.yaxis.set_ticks_position('left')  # 将y轴的位置设置在右左边
    #ax.invert_yaxis()  # y轴反向
    #ax.invert_xaxis()
    #plt.suptitle("RUNOOB subplot Test")
    fig = plt.gcf()
    figList.append(fig)

    plt.savefig(os.getcwd()+'\\'+'preview.png')
    #plt.scatter([-y for y in yArray], xArray)
    plt.show()



qmut_1 = QMutex() # 创建线程锁
qmut_2 = QMutex()
# 继承QThread
class Thread_1(QThread):  # 线程1
    def __init__(self):
        super().__init__()

    def run(self):
        qmut_1.lock() # 加锁
        values = [1, 2, 3, 4, 5]
        for i in values:
            print(i)
            time.sleep(0.5)  # 休眠
        qmut_1.unlock() # 解锁


class Thread_2(QThread):  # 线程2
    _signal =pyqtSignal()
    def __init__(self):
        super().__init__()

    def run(self):
        # qmut_2.lock()  # 加锁
        values = ["a", "b", "c", "d", "e"]
        for i in values:
            print(i)
            time.sleep(0.5)
        # qmut_2.unlock()  # 解锁
        self._signal.emit()

class Thread_3(QThread):  # 线程2
    _reloadUISignal =pyqtSignal()
    def __init__(self):
        super().__init__()

    def run(self):
        # qmut_2.lock()  # 加锁
        values = ["a", "b", "c", "d", "e"]
        for i in values:
            print(i)
            time.sleep(0.5)
        # qmut_2.unlock()  # 解锁
        self._reloadUISignal.emit()


class Thread_4(QThread):  # 线程2
    _savePictureSignal =pyqtSignal()
    def __init__(self):
        super().__init__()

    def run(self):
        # qmut_2.lock()  # 加锁
        values = ["a", "b", "c", "d", "e"]
        for i in values:
            print(i)
            time.sleep(0.5)
        # qmut_2.unlock()  # 解锁
        self._savePictureSignal.emit()



class Thread_5(QThread):  # 线程2
    _selectColorSignal =pyqtSignal()
    def __init__(self):
        super().__init__()

    def run(self):
        # qmut_2.lock()  # 加锁
        values = ["a", "b", "c", "d", "e"]
        for i in values:
            print(i)
            time.sleep(0.5)
        # qmut_2.unlock()  # 解锁
        self._selectColorSignal.emit()

#---------------------------------------------------------------------------------

if __name__ == '__main__':
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = window()  # 创建窗体对象
    MainWindow.show()  # 显示窗体
    sys.exit(app.exec_())  # 程序关闭时退出进程

